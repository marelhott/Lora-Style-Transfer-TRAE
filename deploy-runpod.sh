#!/bin/bash

# RunPod Deployment Script pro LoRA Style Transfer
# Podporuje jak Docker tak standalone deployment

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

echo "üöÄ LoRA Style Transfer - RunPod Deployment"
echo "=========================================="

# Detekce prost≈ôed√≠
if [ -f "/.dockerenv" ]; then
    ENVIRONMENT="docker"
    echo "üì¶ Detected: Docker container"
else
    ENVIRONMENT="standalone"
    echo "üñ•Ô∏è  Detected: Standalone RunPod"
fi

# Konfigurace
DATA_PATH="${DATA_PATH:-/data}"
MODELS_PATH="${DATA_PATH}/models"
LORAS_PATH="${DATA_PATH}/loras"

echo "üìÅ Data path: $DATA_PATH"
echo "üìÅ Models path: $MODELS_PATH"
echo "üìÅ LoRAs path: $LORAS_PATH"

# Kontrola persistentn√≠ho disku
if [ ! -d "$DATA_PATH" ]; then
    echo "‚ùå ERROR: Persistentn√≠ disk nenalezen na $DATA_PATH"
    echo "   P≈ôipojte persistentn√≠ disk k /data v RunPod template"
    exit 1
fi

# Vytvo≈ôen√≠ adres√°≈ô≈Ø pro modely
mkdir -p "$MODELS_PATH" "$LORAS_PATH"
echo "‚úÖ Directories created"

# Scan model≈Ø
MODEL_COUNT=$(find "$MODELS_PATH" -name "*.safetensors" -o -name "*.ckpt" 2>/dev/null | wc -l)
LORA_COUNT=$(find "$LORAS_PATH" -name "*.safetensors" -o -name "*.pt" 2>/dev/null | wc -l)

echo "üìä Found models: $MODEL_COUNT full models, $LORA_COUNT LoRAs"

if [ "$MODEL_COUNT" -eq 0 ]; then
    echo "‚ö†Ô∏è  WARNING: ≈Ω√°dn√© modely nenalezeny!"
    echo "   Nahrajte .safetensors nebo .ckpt soubory do $MODELS_PATH"
fi

# Deployment podle prost≈ôed√≠
case "$1" in
    "standalone")
        echo "üêç Starting standalone Python backend..."
        export PYTHONPATH="$SCRIPT_DIR:$PYTHONPATH"
        
        # Instalace z√°vislost√≠ pokud pot≈ôeba
        if ! python3 -c "import fastapi" 2>/dev/null; then
            echo "üì¶ Installing Python dependencies (CUDA 12.1, amd64)..."
            pip install --no-cache-dir fastapi uvicorn pillow
            pip install --no-cache-dir torch==2.1.0+cu121 torchvision==0.16.0+cu121 torchaudio==2.1.0+cu121 \
                --index-url https://download.pytorch.org/whl/cu121
            pip install --no-cache-dir diffusers==0.21.4 transformers==4.35.2 accelerate==0.24.1 safetensors==0.4.0 compel==2.0.2
            # Optional optimizations (GPU-dependent)
            pip install --no-cache-dir xformers==0.0.22.post7 --index-url https://download.pytorch.org/whl/cu121 || true
            pip install --no-cache-dir bitsandbytes==0.41.2.post2 || true
        fi
        
        # Spu≈°tƒõn√≠ standalone backendu
        python3 runpod_backend.py
        ;;
        
    "docker"|"")
        echo "üê≥ Starting Docker mode..."
        
        # Kontrola GPU
        if command -v nvidia-smi >/dev/null 2>&1; then
            echo "üéÆ GPU Info:"
            nvidia-smi --query-gpu=name,memory.total --format=csv,noheader
        fi
        
        # Spu≈°tƒõn√≠ p≈ôes docker-entrypoint.sh
        exec /app/docker-entrypoint.sh
        ;;
        
    "frontend-only")
        echo "üåê Starting frontend only..."
        cd "$SCRIPT_DIR"
        
        if [ ! -d "node_modules" ]; then
            echo "üì¶ Installing Node.js dependencies..."
            npm install
        fi
        
        if [ ! -d ".next" ]; then
            echo "üî® Building frontend..."
            npm run build
        fi
        
        echo "üöÄ Starting Next.js frontend on port 3000..."
        npm start
        ;;
        
    "backend-only")
        echo "üîß Starting backend only..."
        cd "$SCRIPT_DIR/backend"
        
        # Instalace Python z√°vislost√≠ pro CUDA 12.1
        if [ -f "requirements.txt" ]; then
            pip install --no-cache-dir -r requirements.txt || true
        fi
        pip install --no-cache-dir torch==2.1.0+cu121 torchvision==0.16.0+cu121 torchaudio==2.1.0+cu121 \
            --index-url https://download.pytorch.org/whl/cu121
        pip install --no-cache-dir xformers==0.0.22.post7 --index-url https://download.pytorch.org/whl/cu121 || true
        pip install --no-cache-dir bitsandbytes==0.41.2.post2 || true
        
        echo "üöÄ Starting Python backend on port 8000..."
        python main.py
        ;;
        
    "help"|"-h"|"--help")
        echo "Usage: $0 [mode]"
        echo ""
        echo "Modes:"
        echo "  standalone    - Spust√≠ standalone Python backend (doporuƒçeno)"
        echo "  docker        - Spust√≠ p≈ôes Docker setup (v√Ωchoz√≠)"
        echo "  frontend-only - Spust√≠ pouze Next.js frontend"
        echo "  backend-only  - Spust√≠ pouze Python backend"
        echo "  help          - Zobraz√≠ tuto n√°povƒõdu"
        echo ""
        echo "Environment variables:"
        echo "  DATA_PATH     - Cesta k persistentn√≠mu disku (v√Ωchoz√≠: /data)"
        exit 0
        ;;
        
    *)
        echo "‚ùå Unknown mode: $1"
        echo "Use '$0 help' for usage information"
        exit 1
        ;;
esac
