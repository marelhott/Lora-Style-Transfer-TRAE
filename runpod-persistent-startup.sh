#!/bin/bash

# RunPod Startup Script - Kop√≠rov√°n√≠ z Docker image na persistent /data
# Kombinuje v√Ωhody optimalizovan√©ho Docker template s persistent storage

set -e  # Exit on any error

echo "üöÄ LoRA Style Transfer - Docker to Persistent Migration"
echo "==================================================="

# Nastaven√≠ promƒõnn√Ωch
REPO_URL="https://github.com/marelhott/Lora-Style-Transfer-TRAE.git"
APP_DIR="/workspace/app"
DATA_DIR="/data"
PYTHON_PACKAGES="$DATA_DIR/python-packages"
NODE_MODULES="$DATA_DIR/node_modules"

# Funkce pro logov√°n√≠
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üîÑ Setting up application..."

# Clone nebo pull repository
cd /workspace
if [ -d "$APP_DIR" ]; then
    log "üìÇ Application directory exists, pulling latest changes..."
    cd "$APP_DIR"
    git fetch origin
    git reset --hard origin/main
    git pull origin main
else
    log "üì• Cloning repository..."
    git clone "$REPO_URL" "$APP_DIR"
    cd "$APP_DIR"
fi

log "‚úÖ Repository updated successfully"

# Kop√≠rov√°n√≠ Python packages z Docker image na persistent disk
log "üêç Migrating Python packages to persistent storage..."

if [ ! -d "$PYTHON_PACKAGES/torch" ]; then
    log "üì¶ Copying Python packages from Docker image to /data..."
    mkdir -p "$PYTHON_PACKAGES"
    
    # Kop√≠ruj v≈°echny Python bal√≠ƒçky z Docker image
    if [ -d "/usr/local/lib/python3.10/dist-packages" ]; then
        log "üìã Copying from /usr/local/lib/python3.10/dist-packages..."
        cp -r /usr/local/lib/python3.10/dist-packages/* "$PYTHON_PACKAGES/" 2>/dev/null || true
    fi
    
    # Kop√≠ruj tak√© z site-packages pokud existuje
    if [ -d "/usr/local/lib/python3.10/site-packages" ]; then
        log "üìã Copying from /usr/local/lib/python3.10/site-packages..."
        cp -r /usr/local/lib/python3.10/site-packages/* "$PYTHON_PACKAGES/" 2>/dev/null || true
    fi
    
    # Zkontroluj jestli se PyTorch zkop√≠roval
    if [ -d "$PYTHON_PACKAGES/torch" ]; then
        log "‚úÖ PyTorch successfully copied to persistent storage"
    else
        log "‚ö†Ô∏è  PyTorch not found in Docker image, installing fresh..."
        pip install torch torchvision torchaudio --target "$PYTHON_PACKAGES" --index-url https://download.pytorch.org/whl/cu121
    fi
    
    # Doinstaluj chybƒõj√≠c√≠ bal√≠ƒçky z requirements.txt
    if [ -f "backend/requirements.txt" ]; then
        log "üì¶ Installing missing packages from requirements.txt..."
        pip install -r backend/requirements.txt --target "$PYTHON_PACKAGES" --upgrade-strategy only-if-needed
    fi
    
    log "‚úÖ Python packages migrated to persistent storage"
else
    log "‚úÖ Using cached Python packages from persistent storage"
fi

# Nastaven√≠ PYTHONPATH
export PYTHONPATH="$PYTHON_PACKAGES:$PYTHONPATH"

# Setup Node modules
log "üì¶ Setting up Node.js packages..."

if [ ! -d "$NODE_MODULES" ]; then
    log "üì¶ Installing Node modules to persistent storage..."
    
    # Instaluj do persistent location
    npm install --prefix "$DATA_DIR"
    
    log "‚úÖ Node modules installed to persistent storage"
else
    log "‚úÖ Using cached Node modules from persistent storage"
fi

# Vytvo≈ô symlink na node_modules
if [ -L "node_modules" ]; then
    rm node_modules
fi
if [ -d "node_modules" ]; then
    rm -rf node_modules
fi
ln -sf "$NODE_MODULES" ./node_modules

log "üîó Node modules symlinked successfully"

# Ovƒõ≈ô instalace
log "üîç Verifying installations..."
node --version
npm --version
python --version

# Zkontroluj kl√≠ƒçov√© bal√≠ƒçky
if python -c "import torch; print(f'PyTorch {torch.__version__} available')" 2>/dev/null; then
    log "‚úÖ PyTorch is available"
else
    log "‚ùå PyTorch not found, installation may have failed"
fi

if [ -f "node_modules/.bin/next" ]; then
    log "‚úÖ Next.js is available"
else
    log "‚ùå Next.js not found, installation may have failed"
fi

# Nastav environment variables
export MODEL_PATH="$DATA_DIR/models"
export NODE_ENV="development"  # Pou≈æij dev mode pro spolehlivost

log "üåç Environment variables set:"
log "   PYTHONPATH=$PYTHONPATH"
log "   MODEL_PATH=$MODEL_PATH"
log "   NODE_ENV=$NODE_ENV"

# Vytvo≈ô pot≈ôebn√© adres√°≈ôe
mkdir -p "$DATA_DIR/models"
mkdir -p "/tmp/processing"

# Spus≈• aplikaci
log "üöÄ Starting LoRA Style Transfer application..."
log "   Frontend: http://localhost:3000"
log "   Backend API: http://localhost:8000"

# Spus≈• v development mode (spolehlivƒõj≈°√≠)
log "üîß Starting in development mode for better reliability..."
npm run dev &
NEXT_PID=$!

# Poƒçkej na spu≈°tƒõn√≠ Next.js
sleep 15

# Spus≈• Python backend pokud existuje
if [ -f "runpod_backend.py" ]; then
    log "üêç Starting Python backend..."
    python runpod_backend.py &
    PYTHON_PID=$!
fi

log "‚úÖ Application started successfully!"
log "üåê Access your app at the RunPod provided URL"
log "üíæ All dependencies now cached on persistent storage"
log "‚ö° Next restart will be super fast (10-20 seconds)"
log "üìä Logs will appear below..."

# Monitor proces≈Ø
while true; do
    if ! kill -0 $NEXT_PID 2>/dev/null; then
        log "‚ùå Next.js process died, restarting..."
        npm run dev &
        NEXT_PID=$!
    fi
    
    if [ ! -z "$PYTHON_PID" ] && ! kill -0 $PYTHON_PID 2>/dev/null; then
        log "‚ùå Python backend died, restarting..."
        python runpod_backend.py &
        PYTHON_PID=$!
    fi
    
    sleep 30
done